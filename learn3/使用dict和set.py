# dict
# python内置了字典：dict的支持，dict全称dictionary，在其他语言中也称为map，使用键值存储，具有极快的查找速度
d={'Michael':95,'Bob',75,'Tracy':85}
d['Michael']#输出95
#dict原理与查字典一样，在字典索引表中查找对应页码，直接翻到改业，找到。
d['Adam']=67
d['Adam']#输出67
#一个key只能对应一个value，所以多次对一个key放入value，后面的值会把前面的值冲掉
#如果key不存在，会报错
#要避免key不存在的错误，两种方法，一种用in判断key是否存在
'Thomas' in d #输出False
#二是通过get方法，如果key不存在，返回None，或自己制定的value
d.get('Thomas')#返回None的时候python交互式命令行不显示结果
d.get('Thomas',-1)#输出-1
#和list相比，dict特点：查找和插入速度极快，不会随着key的增加而变慢，需要占用大量内存，内存浪费多
#list相反，查找和插入的时间随着元素的增加而增加，占用空间小，浪费内存很少
#dict是用空间来换取时间的一种方法
#dict可以用在需要高速查找的地方，在python代码中无处不在，正确使用dict非常重要，需要牢记的第一条就是dict的key必须是不可变对象
#dict是根据key来计算value的存储位置，如果每次计算key得出的结果不同，那dict内部就完全混乱了。这个通过key计算位置的算法，称为哈希算法。
#要保证hash的正确性，作为key的对象就不能变。在python中，字符串、整数等都是不可变的，因此可以放心的作为key。list是可变的，就不能作为key。

#set
#set和dict类似，也是一组key集合，但不存储value，由于key不重复，所以在set中，没有重复的key。
#要创建一个set，需要提供一个list作为输入集合：
s=set([1,2,3])
s#输出[1,2,3]
#注意，传入的参数[1,2,3]是一个list，而显示的{1,2,3}只是告诉你这个set内部有1，2，3这三个元素，显示的顺序也不表示set是有序的。
#重复元素在set中自动被过滤：
s=set([1,1,2,2,3,3])
s#输出{1，2，3}
#通过add(key)方法可以添加元素到set中，可以重复添加，但不会有效果。
s.add(4)
s#输出{1，2，3，4}
#通过remove(key)方法删除元素
s.remove(4)
s#{1,2,3}
#set可以看成是数学意义上的无序和无重复元素的集合，因此，，两个set可以做数学意义上的交集、并集等操作。
s1=set([1,2,3])
s2=set([2,3,4])
s1&s2#{2,3}
s1|s2#{1,2,3,4}
#set和dict的唯一区别仅仅在于没有存储对应的value，但是set的原理和dict一样，所以，同意不可以放入可变对象，因为无法判断两个可变对象是否相等，也就无法保证set内部“不会有重复元素”
#上面我们讲了，str是不可变对象，list是可变对象
a=['c','b','a']
a.sort()
a#['a','b','c']
#对于不变对象而言，调用对象自身的任意方法，也不会改变对象自身的内容，相反，会创建新的对象并返回，这样保证了不可变对象本身永远不可变