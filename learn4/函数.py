#函数
#基本所有的高级语言都支持函数，python也不例外，python不但能非常灵活的定义函数，而且本身内置了很多有用的函数，可以直接调用。
#抽象 抽象是数学中非常常见的概念借助抽象，我们可以不关心底层的具体计算过程，直接在更高层次上思考问题，函数就是最基本的一种代码抽象方式

#调用函数
#python内置了很多有用的函数，我们可以直接调用
#要调用函数，需要知道函数的名称和参数
abs(100)#100
abs(-20)#20

#数据类型转换
#python内置的常用函数还包括数据类型转换函数，比如int()函数可以把其他数据类型转换为整数
int('123')#123
int(12.34)#12

#定义函数
#在python中，定义一个函数要使用def语句，依次写出函数名，括号、括号中的参数和冒号：
#在缩进快中编写函数体，函数的返回值用return返回
#我们可以自定义一个求绝对值的函数
def my_abs(x):
    if x>=0:
        return x
    else:
        return -x

#请注意，函数体内部的语句在执行时，一旦执行到return，函数就执行完毕，并将结果返回。因此，函数内部通过条件判断和循环可以实现非常复杂的逻辑。
#如果没有return语句，函数执行完毕后也会返回结果，只是结果为None
#return None，可以简写为return
#注意在python交互环境中定义函数时，注意python会出现...提示，函数定义结束后需要按两次回车回到>>>提示符下：
#如果你已经把my_abs()的函数定义保存为abstest.py文件了，那么可以在该文件的当前目录下启动python解释器，用from abstest import my_abs来导入my_abs()函数

#空函数
#如果定义一个什么事也不做的空函数，可以用pass语句
def nop():
    pass

#pass语句什么都不做，那有什么用？实际上pass可以用来作为占位符。比如暂时没有想好怎么写函数代码，就可以先放一个pass
if age>=19:
    pass
#缺少了pass，代码运行就会有语法错误
#调用函数时，如果参数个数不对，python解释器会自动检查出来，抛出异常，如果参数类型不对，python解释器无法帮我们检查，我们可以自行定义参数类型的检查
def my_abs(x):
    if not isinstance(x,(int,float)):
        raise TypeError('bad operand type')
    if x>=0:
        return x
    else:
        return -x
#返回多个值
#函数可以返回多个值么？可以，但实际上返回的仍然是单一值，只是返回的是tuple，在语法上，返回一个tuple可以省略括号，多个变量可以同时接受一个tuple，按位置赋给对应的值

#默认参数
#必选参数在前，默认蚕食在后，变化大的参数在前，变化小的参数在后
#默认参数必须指向不变对象！